{
    "openapi": "3.1.0",
    "info": {
        "title": "JSC Academy - Node.js backend final project",
        "description": "Api documentation",
        "contact": {
            "email": "dameladata17@gmail.com"
        }
    },
    "externalDocs": {
        "description": "Api deploy",
        "url": "https://c21-43-t-node-react-production.up.railway.app/"
    },
    "servers": [
        {
            "url": "https://c21-43-t-node-react-production-227f.up.railway.app/"
        }
    ],
    "tags": [
        {
            "name": "JSC Academy",
            "description": "Online academy"
        },
        {
            "name": "user",
            "description": "Operations about user"
        },
        {
            "name": "class",
            "description": "Products CRUD"
        }
    ],
    "paths": {
        "/users": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Returns all users",
                "description": "",
                "operationId": "getAll",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/users/create": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create new user",
                "description": "",
                "operationId": "create",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Validation exception"
                    }
                }
            }
        },
        "/users/delete/{userId}": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                "operationId": "getOrderById",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of order that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "product"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                    },
                    "username": {
                        "type": "string",
                        "example": "theUser"
                    },
                    "firstName": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "James"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@email.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "12345"
                    },
                    "phone": {
                        "type": "string",
                        "example": "12345"
                    },
                    "userStatus": {
                        "type": "integer",
                        "description": "User Status",
                        "format": "int32",
                        "example": 1
                    }
                },
                "xml": {
                    "name": "user"
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "##default"
                }
            }
        },
        "requestBodies": {
            "UserArray": {
                "description": "List of user object",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                }
            }
        }
    }
}
